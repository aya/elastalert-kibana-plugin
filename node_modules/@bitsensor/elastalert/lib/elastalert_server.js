'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _logger = require('./common/logger');

var _logger2 = _interopRequireDefault(_logger);

var _config = require('./common/config');

var _config2 = _interopRequireDefault(_config);

var _route_setup = require('./routes/route_setup');

var _route_setup2 = _interopRequireDefault(_route_setup);

var _process = require('./controllers/process');

var _process2 = _interopRequireDefault(_process);

var _rules = require('./controllers/rules');

var _rules2 = _interopRequireDefault(_rules);

var _file_system = require('./controllers/rules/file_system');

var _file_system2 = _interopRequireDefault(_file_system);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = new _logger2.default('Server');

var ElastalertServer = function () {
  function ElastalertServer() {
    var _this = this;

    _classCallCheck(this, ElastalertServer);

    this._express = (0, _express2.default)();
    this._runningTimeouts = [];
    this._processController = null;
    this._rulesController = null;

    // Set listener on process exit (SIGINT == ^C)
    process.on('SIGINT', function () {
      process.exit(0);
    });

    process.on('exit', function () {
      logger.info('Stopping server');
      _this.stop();
      logger.info('Server stopped. Bye!');
    });
  }

  _createClass(ElastalertServer, [{
    key: 'start',
    value: function start() {
      var self = this;

      // Start the server when the config is loaded
      _config2.default.ready(function () {
        try {
          self._express.use(_bodyParser2.default.json());
          self._express.use(_bodyParser2.default.urlencoded({ extended: true }));
          self._setupRouter();
          self._runningServer = self.express.listen(_config2.default.get('port'), self._serverController);
          self._express.set('server', self);

          self._fileSystemController = new _file_system2.default();

          //TODO: This is making sure a dummy rule is available to run elastalert with. Should be fixed in ElastAlert repository.
          self._fileSystemController.readFile(_path2.default.join(__dirname, '../docker/rules/dummy.yaml')).then(function (content) {
            self._fileSystemController.writeFile(_path2.default.join(_config2.default.get('elastalertPath'), _config2.default.get('rulesPath').path, 'dummy.yaml'), content).then(function () {
              self._processController = new _process2.default();
              self._processController.start();
            }).catch(function (error) {
              logger.error('Writing to dummy.yaml failed with error', error);
            });
          }).catch(function (error) {
            logger.error('Reading dummy.yaml failed with error', error);
          });

          self._rulesController = new _rules2.default();

          logger.info('Server listening on port ' + _config2.default.get('port'));
        } catch (error) {
          logger.error('Starting server failed with error:', error);
        }
      });
    }
  }, {
    key: 'stop',
    value: function stop() {
      this._processController.stop();
      this._runningServer ? this._runningServer.close() : null;
      this._runningTimeouts.forEach(function (timeout) {
        return clearTimeout(timeout);
      });
    }
  }, {
    key: '_setupRouter',
    value: function _setupRouter() {
      (0, _route_setup2.default)(this._express);
    }
  }, {
    key: '_serverController',
    value: function _serverController() {
      logger.info('Server started');
    }
  }, {
    key: 'express',
    get: function get() {
      return this._express;
    }
  }, {
    key: 'processController',
    get: function get() {
      return this._processController;
    }
  }, {
    key: 'rulesController',
    get: function get() {
      return this._rulesController;
    }
  }]);

  return ElastalertServer;
}();

exports.default = ElastalertServer;