'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RulesRootFolderNotCreatableError = exports.RulesFolderNotWritableError = exports.RulesFolderNotReadableError = exports.RulesFolderNotFoundError = exports.RuleNotWritableError = exports.RuleNotReadableError = exports.RuleNotFoundError = undefined;

var _request_error = require('src/common/errors/request_error');

var _request_error2 = _interopRequireDefault(_request_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RuleNotFoundError = exports.RuleNotFoundError = function (_RequestError) {
  _inherits(RuleNotFoundError, _RequestError);

  function RuleNotFoundError(ruleID) {
    _classCallCheck(this, RuleNotFoundError);

    return _possibleConstructorReturn(this, (RuleNotFoundError.__proto__ || Object.getPrototypeOf(RuleNotFoundError)).call(this, 'ruleNotFound', 'The requested rule with id: \'' + ruleID + '\' couldn\'t be found.', 404));
  }

  return RuleNotFoundError;
}(_request_error2.default);

var RuleNotReadableError = exports.RuleNotReadableError = function (_RequestError2) {
  _inherits(RuleNotReadableError, _RequestError2);

  function RuleNotReadableError(ruleID) {
    _classCallCheck(this, RuleNotReadableError);

    return _possibleConstructorReturn(this, (RuleNotReadableError.__proto__ || Object.getPrototypeOf(RuleNotReadableError)).call(this, 'ruleNotReadable', 'The requested rule with id: \'' + ruleID + '\' isn\'t readable by the file system.', 403));
  }

  return RuleNotReadableError;
}(_request_error2.default);

var RuleNotWritableError = exports.RuleNotWritableError = function (_RequestError3) {
  _inherits(RuleNotWritableError, _RequestError3);

  function RuleNotWritableError(ruleID) {
    _classCallCheck(this, RuleNotWritableError);

    return _possibleConstructorReturn(this, (RuleNotWritableError.__proto__ || Object.getPrototypeOf(RuleNotWritableError)).call(this, 'ruleNotWritable', 'The requested rule with id: \'' + ruleID + '\' isn\'t writable by the file system.', 403));
  }

  return RuleNotWritableError;
}(_request_error2.default);

var RulesFolderNotFoundError = exports.RulesFolderNotFoundError = function (_RequestError4) {
  _inherits(RulesFolderNotFoundError, _RequestError4);

  function RulesFolderNotFoundError(path) {
    _classCallCheck(this, RulesFolderNotFoundError);

    return _possibleConstructorReturn(this, (RulesFolderNotFoundError.__proto__ || Object.getPrototypeOf(RulesFolderNotFoundError)).call(this, 'rulesFolderNotFound', 'The requested folder with path: \'' + path + '\' couldn\'t be found.', 404));
  }

  return RulesFolderNotFoundError;
}(_request_error2.default);

var RulesFolderNotReadableError = exports.RulesFolderNotReadableError = function (_RequestError5) {
  _inherits(RulesFolderNotReadableError, _RequestError5);

  function RulesFolderNotReadableError(path) {
    _classCallCheck(this, RulesFolderNotReadableError);

    return _possibleConstructorReturn(this, (RulesFolderNotReadableError.__proto__ || Object.getPrototypeOf(RulesFolderNotReadableError)).call(this, 'rulesFolderNotReadable', 'The requested folder with path: \'' + path + '\' isn\'t readable by the file system.', 403));
  }

  return RulesFolderNotReadableError;
}(_request_error2.default);

var RulesFolderNotWritableError = exports.RulesFolderNotWritableError = function (_RequestError6) {
  _inherits(RulesFolderNotWritableError, _RequestError6);

  function RulesFolderNotWritableError(path) {
    _classCallCheck(this, RulesFolderNotWritableError);

    return _possibleConstructorReturn(this, (RulesFolderNotWritableError.__proto__ || Object.getPrototypeOf(RulesFolderNotWritableError)).call(this, 'rulesFolderNotWritable', 'The requested folder with path: \'' + path + '\' isn\'t writable by the file system.', 403));
  }

  return RulesFolderNotWritableError;
}(_request_error2.default);

var RulesRootFolderNotCreatableError = exports.RulesRootFolderNotCreatableError = function (_RequestError7) {
  _inherits(RulesRootFolderNotCreatableError, _RequestError7);

  function RulesRootFolderNotCreatableError() {
    _classCallCheck(this, RulesRootFolderNotCreatableError);

    return _possibleConstructorReturn(this, (RulesRootFolderNotCreatableError.__proto__ || Object.getPrototypeOf(RulesRootFolderNotCreatableError)).call(this, 'rulesRootFolderNotCreatable', 'The rules folder wasn\'t found and couldn\'t be created by the file system.', 403));
  }

  return RulesRootFolderNotCreatableError;
}(_request_error2.default);