'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _bunyan_instance = require('./bunyan_instance');

var _bunyan_instance2 = _interopRequireDefault(_bunyan_instance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Logger = function () {
  function Logger(serviceName) {
    _classCallCheck(this, Logger);

    this.serviceName = serviceName;
  }

  _createClass(Logger, [{
    key: 'info',
    value: function info() {
      for (var _len = arguments.length, messages = Array(_len), _key = 0; _key < _len; _key++) {
        messages[_key] = arguments[_key];
      }

      _bunyan_instance2.default.info.apply(_bunyan_instance2.default, [this.serviceName + ': '].concat(messages));
    }
  }, {
    key: 'warn',
    value: function warn() {
      for (var _len2 = arguments.length, messages = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        messages[_key2] = arguments[_key2];
      }

      _bunyan_instance2.default.warn.apply(_bunyan_instance2.default, [this.serviceName + ': '].concat(messages));
    }
  }, {
    key: 'error',
    value: function error() {
      for (var _len3 = arguments.length, messages = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        messages[_key3] = arguments[_key3];
      }

      _bunyan_instance2.default.error.apply(_bunyan_instance2.default, [this.serviceName + ': '].concat(messages));
    }
  }, {
    key: 'debug',
    value: function debug() {
      for (var _len4 = arguments.length, messages = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        messages[_key4] = arguments[_key4];
      }

      _bunyan_instance2.default.debug.apply(_bunyan_instance2.default, [this.serviceName + ': '].concat(messages));
    }
  }]);

  return Logger;
}();

exports.default = Logger;