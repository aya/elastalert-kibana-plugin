'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _child_process = require('child_process');

var _config = require('src/common/config');

var _config2 = _interopRequireDefault(_config);

var _logger = require('src/common/logger');

var _logger2 = _interopRequireDefault(_logger);

var _status = require('src/common/status');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var logger = new _logger2.default('ProcessController');

var ProcessController = function () {
  function ProcessController() {
    _classCallCheck(this, ProcessController);

    this._elastalertPath = _config2.default.get('elastalertPath');
    this._status = _status.Status.IDLE;

    /**
     * @type {ChildProcess}
     * @private
     */
    this._process = null;
  }

  _createClass(ProcessController, [{
    key: 'start',


    /**
     * Start ElastAlert if it isn't already running.
     */
    value: function start() {
      var _this = this;

      // Do not do anything if ElastAlert is already running
      if (this._process !== null) {
        logger.warn('ElastAlert is already running!');
        return;
      }

      // Start ElastAlert from the directory specified in the config
      logger.info('Starting ElastAlert');
      this._status = _status.Status.STARTING;

      // Create ElastAlert index if it doesn't exist yet
      logger.info('Creating index');
      var indexCreate = (0, _child_process.spawnSync)('python', ['elastalert/create_index.py', '--index', 'elastalert_status', '--old-index', ''], {
        cwd: this._elastalertPath
      });

      // Redirect stdin/stderr to logger
      if (indexCreate.stdout.toString() !== '') {
        logger.info(indexCreate.stdout.toString());
      }
      if (indexCreate.stderr.toString() !== '') {
        logger.error(indexCreate.stderr.toString());
      }

      // Set listeners for index create exit
      if (indexCreate.status === 0) {
        logger.info('Index create exited with code ' + indexCreate.status);
      } else {
        logger.error('Index create exited with code ' + indexCreate.status);
        logger.warn('ElastAlert will start but might not be able to save its data!');
      }

      this._process = (0, _child_process.spawn)('python', ['elastalert/elastalert.py'], {
        cwd: this._elastalertPath
      });

      logger.info('Started Elastalert (PID: ' + this._process.pid + ')');
      this._status = _status.Status.READY;

      // Redirect stdin/stderr to logger
      this._process.stdout.on('data', function (data) {
        logger.info(data.toString());
      });
      this._process.stderr.on('data', function (data) {
        logger.error(data.toString());
      });

      // Set listeners for ElastAlert exit
      this._process.on('exit', function (code) {
        if (code === 0) {
          logger.info('ElastAlert exited with code ' + code);
          _this._status = _status.Status.IDLE;
        } else {
          logger.error('ElastAlert exited with code ' + code);
          _this._status = _status.Status.ERROR;
        }
        _this._process = null;
      });

      // Set listener for ElastAlert error
      this._process.on('error', function (err) {
        logger.error('ElastAlert error: ' + err.toString());
        _this._status = _status.Status.ERROR;
        _this._process = null;
      });
    }

    /**
     * Stop ElastAlert if it is running.
     */

  }, {
    key: 'stop',
    value: function stop() {
      if (this._process !== null) {
        // Stop ElastAlert
        logger.info('Stopping ElastAlert (PID: ' + this._process.pid + ')');
        this._status = _status.Status.CLOSING;
        this._process.kill('SIGINT');
      } else {
        // Do not do anything if ElastAlert is not running
        logger.info('ElastAlert is not running');
      }
    }
  }, {
    key: 'status',
    get: function get() {
      return this._status;
    }
  }]);

  return ProcessController;
}();

exports.default = ProcessController;