'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FileSystemController = function () {
  function FileSystemController() {
    _classCallCheck(this, FileSystemController);
  }

  _createClass(FileSystemController, [{
    key: 'readDirectory',
    value: function readDirectory(path) {
      return new Promise(function (resolve, reject) {
        try {
          _fs2.default.readdir(path, function (error, elements) {
            if (error) {
              reject(error);
            } else {
              (function () {
                var statCount = 0;
                var directoryIndex = {
                  directories: [],
                  files: []
                };

                elements.forEach(function (element) {
                  _fs2.default.stat((0, _path.join)(path, element), function (error, stats) {
                    if (stats.isDirectory()) {
                      directoryIndex.directories.push(element);
                    } else if (stats.isFile()) {
                      directoryIndex.files.push(element);
                    }

                    statCount++;
                    if (statCount === elements.length) {
                      resolve(directoryIndex);
                    }
                  });
                });
              })();
            }
          });
        } catch (error) {
          reject(error);
        }
      });
    }

    /*createDirectory(path, directoryName) {
     }*/

    /*deleteDirectory(path) {
     }*/

  }, {
    key: 'fileExists',
    value: function fileExists(path) {
      return new Promise(function (resolve, reject) {
        try {
          _fs2.default.access(path, _fs2.default.F_OK, function (error) {
            error ? resolve(false) : resolve(true);
          });
        } catch (error) {
          reject(error);
        }
      });
    }

    /*createFile(path, fileName, content = '') {
     }*/

  }, {
    key: 'readFile',
    value: function readFile(path) {
      return new Promise(function (resolve, reject) {
        _fs2.default.readFile(path, 'utf8', function (error, content) {
          error ? reject(error) : resolve(content);
        });
      });
    }
  }, {
    key: 'writeFile',
    value: function writeFile(path) {
      var content = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

      return new Promise(function (resolve, reject) {
        try {
          _fs2.default.writeFile(path, content, function (error) {
            error ? reject(error) : resolve();
          });
        } catch (error) {
          console.log(error);
        }
      });
    }
  }, {
    key: 'deleteFile',
    value: function deleteFile(path) {
      return new Promise(function (resolve, reject) {
        _fs2.default.unlink(path, function (error) {
          error ? reject(error) : resolve();
        });
      });
    }
  }]);

  return FileSystemController;
}();

exports.default = FileSystemController;