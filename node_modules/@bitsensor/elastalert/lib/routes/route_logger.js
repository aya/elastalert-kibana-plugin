'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _logger = require('../common/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RouteLogger = function (_Logger) {
  _inherits(RouteLogger, _Logger);

  function RouteLogger() {
    var handler = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
    var method = arguments.length <= 1 || arguments[1] === undefined ? 'GET' : arguments[1];

    _classCallCheck(this, RouteLogger);

    var _this = _possibleConstructorReturn(this, (RouteLogger.__proto__ || Object.getPrototypeOf(RouteLogger)).call(this, 'Routes'));

    _this._handler = handler;
    _this._method = method;
    return _this;
  }

  _createClass(RouteLogger, [{
    key: 'sendSuccessful',
    value: function sendSuccessful() {
      var data = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      this.info('Successfully handled ' + this._method + ' request for \'' + this._handler + '\'' + (data ? ' with data: \n\n' + data : '.'));
    }
  }, {
    key: 'sendFailed',
    value: function sendFailed(error) {
      this.error('Request for \'' + this._handler + '\' failed with error: \n\n', error);
    }
  }]);

  return RouteLogger;
}(_logger2.default);

exports.default = RouteLogger;